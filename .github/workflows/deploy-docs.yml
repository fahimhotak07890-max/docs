name: Deploy versioned docs using mike (classic GitHub Pages mode)

on:
  push:
    branches:
      - '**'  # Trigger on all pushes; script exits early if not a release branch

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Exit early if not a release branch
        run: |
          BRANCH="${GITHUB_REF##*/}"
          echo "Current branch: $BRANCH"
          if [[ ! "$BRANCH" =~ ^release-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Not a release branch. Skipping deploy."
            exit 0
          fi

      - name: Fetch versions.yml from main
        run: |
          git fetch origin main
          git show origin/main:versions.yml > versions.yml

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install mkdocs and mike
        run: |
          pip install -r requirements.txt

      - name: Configure Git user for deploy
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Deploy current version with mike
        run: |
          python3 <<EOF
          import os
          import subprocess
          import yaml

          assert os.path.exists("versions.yml"), "versions.yml is missing"

          with open("versions.yml", "r") as f:
              versions = yaml.safe_load(f).get("versions", [])

          if not versions:
              raise SystemExit("No versions defined")

          branch = os.environ["GITHUB_REF"].split("/")[-1]
          version = branch.replace("release-v", "")

          entry = next((v for v in versions if v["version"] == version), None)
          if not entry:
              raise SystemExit(f"Version {version} not found in versions.yml")

          title = entry.get("title", version)
          aliases = entry.get("aliases", [])
          is_default = entry.get("default", False)

          cmd = ["mike", "deploy", "--push", "--update-aliases", title] + aliases
          print(f"Deploying: {' '.join(cmd)}")
          subprocess.run(cmd, check=True)

          if is_default:
              print(f"Setting {title} as default")
              subprocess.run(["mike", "set-default", title, "--push"], check=True)
          EOF
