name: centralized deploy of versioned docs

on:
  push:
    branches:
      - '**'

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Exit if not a release branch
        run: |
          BRANCH="${GITHUB_REF##*/}"
          echo "Branch: $BRANCH"
          if [[ ! "$BRANCH" =~ ^release-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Not a release branch. Exiting."
            exit 0
          fi

      - name: Fetch versions.yml from main
        run: |
          git fetch origin main
          git show origin/main:versions.yml > versions.yml || {
            echo "❌ Could not fetch versions.yml from main"
            exit 1
          }

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Configure Git Credentials
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Deploy current version docs using mike
        run: |
          python3 <<EOF
          import yaml
          import subprocess
          import os

          if not os.path.exists("versions.yml"):
              raise SystemExit("❌ versions.yml is missing!")

          with open("versions.yml", "r") as f:
              versions = yaml.safe_load(f).get("versions", [])

          if not versions:
              raise SystemExit("❌ No versions defined in versions.yml")

          branch = os.environ.get("GITHUB_REF", "").split("/")[-1]
          target_version = branch.replace("release-v", "")
          matched = [v for v in versions if v["version"] == target_version]

          if not matched:
              raise SystemExit(f"❌ Version {target_version} not found in versions.yml")

          entry = matched[0]
          version = entry["version"]
          aliases = entry.get("aliases", [])
          is_default = entry.get("default", False)

          # Compose command: mike deploy --push --update-aliases <version> [aliases...]
          deploy_cmd = ["mike", "deploy", "--push", "--update-aliases", f"v{version}"] + aliases

          print(f"🚀 Deploying: {' '.join(deploy_cmd)}")
          result = subprocess.run(deploy_cmd, capture_output=True, text=True)
          print(result.stdout)
          print(result.stderr)

          print("📋 Versions deployed (mike list):")
          subprocess.run(["mike", "list"], check=True)

          if is_default:
              print(f"⭐ Setting v{version} as default")
              result = subprocess.run(["mike", "set-default", f"v{version}", "--push"], capture_output=True, text=True)
              print(result.stdout)
              print(result.stderr)
          EOF
